import { app, BrowserWindow, ipcMain, WebContents } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

type MenuActionType = 'minimize' | 'maximize' | 'unmaximize' | 'restore' | 'close';

function handleSizeChange(window: BrowserWindow) {
    const actions: Array<MenuActionType> = ['minimize', 'unmaximize', 'maximize', 'restore', 'close'];
    actions.forEach((action) => {
        window.on(action as any, (e) => {
            window.webContents.send('menu-actioned', {
                type: action,
            });
        });
    });
    window.webContents.on('ipc-message', (e, channel, message) => {
        if (channel !== 'menu-action') {
            return;
        }
        const json = JSON.parse(message) as { type: string };
        if (json.type === 'minimize') {
            window.minimize();
        }
        if (json.type === 'maximize') {
            window.maximize();
        }
        if (json.type === 'restore') {
            window.restore();
        }
        if (json.type === 'close') {
            window.close();
        }
    });
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        frame: false,
        hasShadow: false,
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    if (process.env.NODE_ENV === 'development') {
        // Open the DevTools.
        mainWindow.webContents.openDevTools();
    }
    handleSizeChange(mainWindow);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
